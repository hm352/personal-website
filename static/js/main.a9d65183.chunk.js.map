{"version":3,"sources":["circle.png","stipes1.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","Stripe","styled","Col","props","color","StyledStripe","colour1","colour2","className","id","CVButton","Button","ColorContainer","position","text-center","href","App","src","logo","vertical","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,oC,4ECA3CD,EAAOC,QAAU,IAA0B,qC,obCc3C,IAAMC,EAASC,YAAOC,IAAPD,CAAH,IACI,SAAAE,GAAK,OAAIA,EAAMC,QAE/B,SAASC,EAAaF,GACtB,IAAIG,EAAUH,EAAMG,QAChBC,EAAUJ,EAAMI,QACpB,OAAO,kBAAC,IAAD,CAAKC,UAAWL,EAAMK,WAC3B,kBAAC,IAAD,MACA,kBAACR,EAAD,CAAQS,GAAG,cAAcL,MAAOE,IAChC,kBAACN,EAAD,CAAQS,GAAG,eAAcL,MAAOG,IAChC,kBAAC,IAAD,OAiBF,IAAMG,EAAWT,YAAOU,IAAPV,CAAH,KAKd,SAASW,EAAeT,GACtB,IAAIU,EAAWV,EAAMU,SACrB,OAAO,kBAAC,IAAD,CAAKJ,GAAKI,GACb,kBAAC,IAAD,CAAKC,cAAY,QACf,kBAAC,IAAD,CAAQC,KAAMZ,EAAMY,SA0CbC,MArCf,WACE,OACA,yBAAKR,UAAU,OACX,4BAAQS,IAAI,wDACZ,4BACEA,IAAI,gEAEN,4BACEA,IAAI,uEACN,qEACA,yBAAKR,GAAG,UACN,6CACA,wBAAIA,GAAG,gBAAP,uBAEF,kBAAC,IAAD,CAAWA,GAAG,UACZ,kBAAC,IAAD,CAAOA,GAAG,eAAeQ,IAAMC,MAC/B,kBAAC,IAAD,CAAaC,UAAQ,GACjB,kBAACP,EAAD,CAAiBG,KAAK,2BAA2BF,SAAS,UAC1D,kBAACD,EAAD,CAAiBC,SAAS,UAC1B,kBAACD,EAAD,CAAiBC,SAAS,UAC1B,kBAACD,EAAD,CAAiBC,SAAS,YAGhC,kBAAC,IAAD,CAAWJ,GAAG,WACV,kBAACJ,EAAD,CAAcI,GAAG,SAASD,UAAU,SAASF,QAAQ,UAAUC,QAAQ,aAE3E,yBAAKE,GAAG,MACR,kBAAC,IAAD,CAAWA,GAAG,WACV,kBAACJ,EAAD,CAAcI,GAAG,SAASD,UAAU,SAASF,QAAQ,UAAUC,QAAQ,YACvE,kBAACG,EAAD,CAAUF,UAAU,YAApB,qBCxEUY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a9d65183.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/circle.130189fb.png\";","module.exports = __webpack_public_path__ + \"static/media/stipes1.0aca7974.png\";","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image';\nimport Row from 'react-bootstrap/Row';\nimport logo from './circle.png';\nimport stripe from './stipes1.png';\nimport styled from 'styled-components';\n// import { bounce } from 'react-animations';\n// import logo from './logo.svg';\nimport './App.css';\n\nconst Stripe = styled(Col)`\n  background: ${props => props.color};\n`\nfunction StyledStripe(props){\nvar colour1 = props.colour1;\nvar colour2 = props.colour2;\nreturn <Row className={props.className}>\n  <Col></Col>\n  <Stripe id=\"left-stripe\" color={colour1}/>\n  <Stripe id=\"right-stripe\"color={colour2}/>\n  <Col></Col>\n</Row>;\n}\n\nfunction OuterStripe(props){\nvar colour1 = props.colour1;\nvar colour2 = props.colour2;\nreturn <Row className={props.className}>\n\n  <Stripe id=\"left-stripe\" color={colour1}/>\n    <Col></Col>\n    <Col></Col>\n  <Stripe id=\"right-stripe\"color={colour2}/>\n\n</Row>;\n}\n\nconst CVButton = styled(Button)`\n  background: #2b211f;\n`\n\n\nfunction ColorContainer(props){\n  var position = props.position;\n  return <Row id={ position }>\n      <Col text-center=\"true\" >\n        <Button href={props.href}></Button>\n      </Col>\n    </Row>;\n}\n\nfunction App() {\n  return (\n  <div className=\"App\">\n      <script src=\"https://unpkg.com/react/umd/react.production.min.js\"/>\n      <script\n        src=\"https://unpkg.com/react-dom/umd/react-dom.production.min.js\"\n      />\n      <script\n        src=\"https://unpkg.com/react-bootstrap@next/dist/react-bootstrap.min.js\"      />\n      <script>var Alert = ReactBootstrap.Alert;</script>\n      <div id=\"spacer\">\n        <h5> Henry Maher </h5>\n        <h6 id=\"changingText\"> Personal Website </h6>\n      </div>\n      <Container id=\"circle\">\n        <Image id=\"circle-image\" src={ logo }/>\n        <ButtonGroup vertical>\n            <ColorContainer  href=\"https://github.com/hm352\" position=\"outer\"></ColorContainer>\n            <ColorContainer  position=\"inner\"></ColorContainer>\n            <ColorContainer  position=\"inner\"></ColorContainer>\n            <ColorContainer  position=\"outer\"></ColorContainer>\n        </ButtonGroup>\n      </Container>\n      <Container id=\"stripes\">\n          <StyledStripe id=\"stripe\" className=\"stripe\" colour1=\"#748f87\" colour2=\"#2b211f\"></StyledStripe>\n      </Container>\n      <div id=\"CV\">\n      <Container id=\"stripes\">\n          <StyledStripe id=\"stripe\" className=\"stripe\" colour1=\"#748f87\" colour2=\"#2b211f\"></StyledStripe>\n          <CVButton className=\"cvbutton\"> CV Download </CVButton>\n      </Container>\n\n      </div>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}