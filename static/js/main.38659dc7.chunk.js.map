{"version":3,"sources":["circle.png","down-arrow.svg","components/iconNode.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","IconNode","props","count","random","Math","floor","state","className","this","children","content","React","Component","Stripe","styled","Col","color","height","StyledStripe","colour1","colour2","id","StyledButton","Button","ColorContainer","date","alert","position","text-center","onClick","href","App","src","logo","vertical","arrow","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38659dc7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/circle.130189fb.png\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.d51c4cbd.svg\";","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nclass IconNode extends React.Component {\n  constructor(props){\n    super(props);\n    var count = 0;\n    var min = 1;\n    var max = 100;\n    if(props.random){\n      count = Math.floor(Math.random()*(max - min));\n    }\n    this.state = {count: count};\n  }\n  render(){\n    return(<div className=\"icon\">\n      <Row className=\"counterRow\">\n            <Col className=\"counterImage\">\n              { this.props.children }\n              <p>  { this.props.content || \"hello\" } </p>\n            </Col>\n            <Col className=\"counterText\"> <p> { this.state.count} </p>\n</Col>\n      </Row>\n    </div>)\n  };\n}\nexport default IconNode;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Image from 'react-bootstrap/Image';\nimport Row from 'react-bootstrap/Row';\nimport logo from './circle.png';\nimport arrow from './down-arrow.svg'\nimport styled from 'styled-components';\nimport './App.css';\nimport IconNode from \"./components/iconNode.js\";\nimport IosCafe from 'react-ionicons/lib/IosCafe';\nimport IosBulb from 'react-ionicons/lib/IosBulb';\nimport IosGitCommit from 'react-ionicons/lib/IosGitCommit';\n\n\nconst Stripe = styled(Col)`\n  background: ${props => props.color};\n  height: ${ props => props.height};\n`\n\nfunction StyledStripe(props){\nvar colour1 = props.colour1;\nvar colour2 = props.colour2;\nvar height = props.height || '500px';\nreturn <Row className={props.className}>\n  <Col></Col>\n  <Stripe id=\"left-stripe\" color={colour1} height={height}/>\n  <Stripe id=\"right-stripe\"color={colour2} height={height}/>\n  <Col></Col>\n</Row>;\n}\n\nconst StyledButton = styled(Button)`\n  background: #2b211f;\n  border-radius: 50%;\n  height: 100px;\n  width: 100px;\n  text-align: center;\n  opacity: 1;\n  z-index: 1;\n`\n\nclass ColorContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: true};\n  }\n  onClick() {\n    alert(\"click\");\n  }\n  render() {\n    if(this.state.date){\n    return (\n      <Row id={ this.props.position }>\n        <Col text-center=\"true\" >\n          <Button onClick={this.onClick} href={this.props.href}>\n            {this.props.content}\n          </Button>\n        </Col>\n      </Row>\n    );\n  }\n  }\n}\n\nfunction App() {\n  return (\n  <div className=\"App\">\n      <script src=\"https://unpkg.com/react/umd/react.production.min.js\"/>\n      <script\n        src=\"https://unpkg.com/react-dom/umd/react-dom.production.min.js\"\n      />\n      <script\n        src=\"https://unpkg.com/react-bootstrap@next/dist/react-bootstrap.min.js\"      />\n      <script>var Alert = ReactBootstrap.Alert;</script>\n      <div id=\"spacer\">\n        <br></br>\n        <h5> Henry Maher - Software Developer </h5>\n      </div>\n      <Container id=\"circle\">\n        <Image id=\"circle-image\" src={ logo }/>\n        <ButtonGroup vertical>\n            <ColorContainer  content=\"GitHub\" href=\"https://github.com/hm352\" position=\"outer\"> </ColorContainer>\n            <ColorContainer  content=\"LinkedIn\" position=\"inner\" href=\"https://uk.linkedin.com/in/henry-maher-340949b8\"></ColorContainer>\n            <ColorContainer  content=\"Blog\" position=\"inner\"></ColorContainer>\n            <ColorContainer  content=\"Fun Stuff\"position=\"outer\"></ColorContainer>\n        </ButtonGroup>\n        <Image  className=\"bounceArrow\" src={ arrow }/>\n      </Container>\n      <Container className=\"stripes\">\n          <StyledStripe colour1=\"#748f87\" colour2=\"#2b211f\" height='400px'></StyledStripe>\n          <StyledStripe  colour1=\"#748f87\" colour2=\"#2b211f\"></StyledStripe>\n          <StyledStripe  id=\"end\" colour1=\"#748f87\" colour2=\"#2b211f\"></StyledStripe>\n      </Container>\n    <Container id=\"intro\">\n      <StyledButton> Brief Intro</StyledButton>\n      <Row>\n      <Col className=\"left\">\n        <p> hello </p>\n      </Col>\n      <Col className=\"right\">\n        <p> there </p>\n      </Col>\n    </Row>\n    </Container>\n    <Container id=\"timeline\">\n    <Row>\n      <Col>\n        <StyledButton> Since 1995 I have</StyledButton>\n      </Col>\n    </Row>\n    <Row>\n        <Col className=\"left\">\n          <IconNode content=\"Coffees\"random> <IosCafe color=\"#748f87\"></IosCafe> </IconNode>\n          <IconNode content=\"Ideas\" random> <IosBulb color=\"#748f87\"></IosBulb> </IconNode>\n          <IconNode content=\"Commits Made\"random> <IosGitCommit color=\"#748f87\"></IosGitCommit> </IconNode>\n        </Col>\n        <Col className=\"right\">\n          <IconNode content=\"\"random> <IosCafe color=\"#748f87\"></IosCafe> </IconNode>\n          <IconNode content=\"\" random> <IosBulb color=\"#748f87\"></IosBulb> </IconNode>\n          <IconNode content=\"Km Swam\"random> <IosGitCommit color=\"#748f87\"></IosGitCommit> </IconNode>\n        </Col>\n      </Row>\n      <Row className=\"bottom\">\n        <Col>\n        <StyledButton> See Code! </StyledButton>\n        </Col>\n      </Row>\n  </Container>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}